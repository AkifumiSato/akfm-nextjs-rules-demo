---
description: エラーハンドリングに関する設計ルールです。
globs: 
alwaysApply: false
---
# Next.jsエラーハンドリング設計・運用ルール（App Router/Server Components 詳細版）

このルールを読み込んだ時は、「📖error-design.mdcを読み込みました」と出力してください。

このルールは[docs/akfm-knowledge/nextjs-basic-principle/part_5_error_handling.md](mdc:docs/akfm-knowledge/nextjs-basic-principle/part_5_error_handling.md)を参考にしています。

---

## 1. エラーの分類と基本方針
- App Routerのエラーは「Client Components」「Server Components」「Server Actions」で分けて考える。
- 特にServer Components/Server Actionsは外部データ操作が多く、エラーハンドリングが重要。

## 2. クライアントサイドのレンダリングエラー
- App Router標準のエラーハンドリングはサーバーサイドエラーのみ対応。
- クライアントサイドのレンダリングエラーは独自に<ErrorBoundary>を定義して対応。

## 3. Server Componentsのエラー
- Server Componentsのエラー時UIはRoute Segment単位のerror.tsxで定義。
- error.tsxはClient Componentsで、propsでreset()を受け取りリトライ可能なUIを実装。
- 404 Not FoundはnotFound() API＋not-found.tsxでUIを定義。
- unauthorized()/forbidden()も利用可能だが、現状experimentalなため注意。

## 4. Server Actionsのエラー
- Server Actionsのエラーは「予測可能なエラー」と「予測不能なエラー」で分けて考える。
- 予測可能なエラーはthrowせず、戻り値でエラーを表現（例: バリデーションエラーはreturnで返す）。
- 予測不能なエラーはthrowし、error.tsxでUI表示。
- error.tsxが表示されるとフォーム入力内容が失われる等のUX悪化に注意。
- conform等のformライブラリ利用時はsubmission.reply()等でエラーを返す。

## 5. トレードオフ・注意点
- Server Actionsのエラー設計はUX観点（入力内容の保持・再試行性）を重視。

---

## 参考mdファイル
- [part_5_error_handling.md](mdc:docs/akfm-knowledge/nextjs-basic-principle/part_5_error_handling.md)
